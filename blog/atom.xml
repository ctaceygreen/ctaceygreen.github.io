<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ctaceygreen.github.io/blog</id>
    <title>Less Intimidating Blog</title>
    <updated>2023-05-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ctaceygreen.github.io/blog"/>
    <subtitle>Less Intimidating Blog</subtitle>
    <icon>https://ctaceygreen.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Paved Paths Series - Part 4 - The Anatomy of Paved Paths]]></title>
        <id>https://ctaceygreen.github.io/blog/paved-paths-series-part-4-the-anatomy-of-paved-paths</id>
        <link href="https://ctaceygreen.github.io/blog/paved-paths-series-part-4-the-anatomy-of-paved-paths"/>
        <updated>2023-05-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Part 4 of the series - A deeper dive into the inner workings of paved paths]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="title image reading &amp;quot;The anatomy of paved paths&amp;quot; with lego behind it" src="/assets/images/title-image-a062a520b2b9f8b3c807a109c6514cd4.png" width="1061" height="398" class="img_ev3q"></p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Paved Path Series</div><div class="admonitionContent_S0QG"><p>This is Part 4 in a series of posts discussing Paved Paths between <a href="https://www.rickroche.com/" target="_blank" rel="noopener noreferrer">Rick</a> and I.</p><ul><li><a href="https://www.rickroche.com/2023/04/paved-paths-series-part-1-lets-talk-about-paved-paths" target="_blank" rel="noopener noreferrer">Part 1 - Paved Paths: Let's talk about paved paths</a></li><li><a href="https://christaceygreen.com/blog/paved-paths-series-part-2-a-one-pager" target="_blank" rel="noopener noreferrer">Part 2 - Paved Paths: One Pager</a></li><li><a href="https://www.rickroche.com/2023/05/paved-paths-series-part-3-why-paved-paths" target="_blank" rel="noopener noreferrer">Part 3 - Paved Paths: Why Paved Paths?</a></li><li><a href="https://www.rickroche.com/2023/06/paved-paths-series-part-5-the-spectrum/" target="_blank" rel="noopener noreferrer">Part 5 - Paved Paths: The Spectrum of Platform Engineering and Paved Paths</a></li></ul></div></div><p>In this post, we explore the inner workings of what makes up a paved path, aiming to demystify the components that will help you to realise the characteristics of a good paved path.</p><h1>What are they made of?</h1><p>Paved paths will tend to be specific to your organisation, your tech stack and your principles but there are several questions that they should be able to answer, spanning four categories</p><ul><li>Building Blocks</li><li>Blueprints &amp; Funnels</li><li>Documentation and Onboarding</li><li>Culture</li></ul><p><img loading="lazy" alt="Venn diagram of the intersection of four circles, Docs &amp;amp; Onboarding, Blueprints &amp;amp; funnels, Building blocks, and Culture" src="/assets/images/paved-path-venn-bbf46a32411542490408d72b89fe35e4.png" width="561" height="564" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-blocks">Building blocks<a href="#building-blocks" class="hash-link" aria-label="Direct link to Building blocks" title="Direct link to Building blocks">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="categorise-your-building-blocks">Categorise your building blocks<a href="#categorise-your-building-blocks" class="hash-link" aria-label="Direct link to Categorise your building blocks" title="Direct link to Categorise your building blocks">​</a></h3><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Answers the questions:</div><div class="admonitionContent_S0QG"><ul><li>When I need to perform "X" in my app/service, what tool/technology do I use?</li><li>I want to "do X", do we have something in the organisation that enables that already?</li><li>Do we have multiple technologies/tools doing the same thing? How do I know what to choose? What is the tools' lifecycle?</li><li>To adopt this approach, what cultural changes are needed in the team?</li></ul></div></div><p>There are a general set of styles of building blocks that are useful here:</p><p><strong>Infrastructure building blocks</strong> - ingress (load balancing, WAF etc), compute, secrets / config management, feature flags etc</p><ul><li>Think of all the components you need to bring your architecture to life</li></ul><p><strong>Application building blocks</strong> - internal libraries, common project structure, scaffolded apps with add-ins for observability, authN/Z, using config / secrets / feature flags etc</p><ul><li>e.g. Spring Initializr for Spring Boot projects or dotnet templates</li></ul><p><strong>Workflow / process building blocks</strong> - Dev(SecFin...)Ops</p><ul><li>Things that run in our pipelines - start small and increment here<ul><li>e.g. Dependency management, SAST, SCA, tests, linters, cost management etc</li></ul></li></ul><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>Make this a rule:&nbsp;<strong>If it's not part of your pipeline, it doesn't exist</strong></p></div></div><p>Write these building blocks down, they form a set of outlines that your paved paths aim to fill out over time, a roadmap of sorts. This can be as simple as a list on a wiki, modelled in software (Enterprise Architecture tools etc), loaded into an Internal Developer Portal or put into a picture. Make it accessible to all, easy to navigate and easy to update.</p><p><img loading="lazy" src="/assets/images/paved-paths-anatomy-categories-ce72f3becdfd1b5bd7a81625ab324018.png" width="541" height="394" class="img_ev3q"></p><p>In your organisation, you will most likely find components that are fulfilled by multiple applications / libraries, a simple way to highlight the lifecycle of these is to use a technology radar and <a href="https://www.thoughtworks.com/radar/byor" target="_blank" rel="noopener noreferrer">Build your Own Radar</a>. This helps teams to decide what they should be phasing in, and phasing out.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-structure-your-building-blocks">How to structure your building blocks<a href="#how-to-structure-your-building-blocks" class="hash-link" aria-label="Direct link to How to structure your building blocks" title="Direct link to How to structure your building blocks">​</a></h3><p>Whenever we think of building blocks, LEGO comes to mind. Keeping the building blocks composable is a great idea - you don't want your paved paths to become a new ball of mud.</p><p>For <strong>infrastructure</strong> building blocks, outputs could be layered Infrastructure as Code (IaC) modules</p><ul><li>Tier 1 - discrete components. e.g. a load balancer module, a WAF module</li><li>Tier 2 - “LEGO” style building blocks, using tier 1. e.g. an application load balancer with WAF</li><li>Tier 3 - “DUPLO” style building blocks that enable infra needed to realise a blueprint - one click accelerators using tier 1 and 2. e.g. a public facing static web application</li></ul><p>For <strong>workflow / process</strong> building blocks, outputs could be a pipeline template library</p><ul><li>Tier 1 - discrete jobs. e.g. build container, scan container, push to registry</li><li>Tier 2 - “LEGO” style building blocks, orchestrating tier 1. e.g. build <!-- -->→<!-- --> scan <!-- -->→<!-- --> push to registry</li><li>Tier 3 - “DUPLO” style building blocks that enable common stages in a pipeline using tier 1 and tier 2</li><li>Tier 4 - full end-to-end pipelines for specific blueprints or generic pipeline structures. e.g. Full CI/CD spanning multiple environments</li></ul><p>Adding extensibility points to all pipeline templates in tiers 3/4 will help to avoid duplication where teams want "almost" whats there.</p><p>For <strong>application</strong> building blocks, outputs could be internal code libraries, such as <code>npm</code> or <code>nuget</code> packages</p><ul><li>Tier 1 - base functionality, following engineering standards. e.g. Logging implementation. Authentication middleware.</li><li>Tier 2 - "LEGO" style building blocks, using tier 1, combining into a common bootstrapping library. e.g. ServiceCollection extension methods for a REST API setting up auth middleware and standard logging of HTTP requests.</li><li>Tier 3 - "DUPLO" style building blocks, using tier 1 and tier 2, that implement a common pattern or process. e.g. A base class for event-driven handlers, implementing an inbox pattern and standard event handling methods.</li></ul><p>Think about what guard rails can be put in place for each building block. We like the "prevent / detect / guide" model:</p><ul><li><strong>Prevent</strong> controls stop teams from doing things that violate a policy or standard. E.g. preventing the creation of a load balancer exposing HTTP or preventing the push of a build of an image that has critical vulnerabilities to your registry.</li><li><strong>Detect</strong> controls allow teams to do things that may not be perfect, or mitigated by other controls but allow them to proceed and then a secondary process monitors them.</li><li><strong>Guide</strong> controls are simply guidance and lessons learnt in using different components.</li></ul><p>The goal is to enable teams to move quickly and safely, enabling them to compose their own high-quality solutions using the building blocks. This is where we would push for the inclusion of standards, to make it easy for teams to do the "right things".</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="blueprints-and-funnels">Blueprints and funnels<a href="#blueprints-and-funnels" class="hash-link" aria-label="Direct link to Blueprints and funnels" title="Direct link to Blueprints and funnels">​</a></h2><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Answers the questions:</div><div class="admonitionContent_S0QG"><ul><li>What are the common patterns / deployment options that are supported?</li><li>When I need to do Z, is there a set of accelerators that bootstrap my starting point?</li><li>For my use-case how do I know what paved path to choose?</li></ul></div></div><p>Outputs would be common blueprints for popular use cases, highlighting technology choices, non-functional characteristics and security. Blueprints should select the building blocks needed to realise the desired architecture, compose them together and provide tooling that allows teams to bootstrap and go. <strong>Blueprints are not pretty pictures - they are evolving software</strong>.</p><p>E.g.</p><ul><li>A Java based internal API</li><li>A Python based public API</li><li>A .NET based asynchronous service</li><li>A public facing static web application</li></ul><p>The focus should be on enabling self-service. Iterating on this tooling with teams is critically important; we can easily get stuck into months of development building a CLI tool that no one will use. Make these blueprints accessible, get feedback from your users and iterate.</p><p>Examples would be (from basic to advanced)</p><ul><li>A set of steps on a wiki, illustrating which steps to follow</li><li>Repositories with fully functional code (app &amp; infra) that teams can clone, run and modify</li><li>A CLI tool that walks them through a wizard, creating repo's, infrastructure and pipelines as needed</li></ul><p><img loading="lazy" src="/assets/images/paved-path-blueprint-accelerate-a7efb3a2a438a34a48aa8ed49a3347a9.png" width="1005" height="748" class="img_ev3q"></p><p><strong>Funnels</strong> are decision trees that allow teams to walk through their use case and end up selecting the correct blueprint. E.g. Asking questions around the users or systems that interact with the service being built. These questions will lead to different blueprints: one for client credential grant flow or one for PKCE. Or helping a team decide if their service is public facing and needs to be protected by a public facing WAF directly.</p><p><img loading="lazy" src="/assets/images/paved-paths-anatomy-funnel-6b0071417358030bed51d80fd50159a2.png" width="577" height="712" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="culture">Culture<a href="#culture" class="hash-link" aria-label="Direct link to Culture" title="Direct link to Culture">​</a></h2><p>Interwoven throughout your paved paths will be elements that influence the way your teams work. You may be moving teams towards trunk-based development or separating release and deployment using feature flags. Without guidance as to the why, and how to use the techniques effectively, your paved paths with struggle to gain traction, adoption and success.</p><p>Similarly, by shifting functions left, or enabling autonomy, there will be new responsibilities that teams are now accountable for. These need to be articulated, discussed and understood by all involved - you cannot over communicate these cultural changes.</p><p>Spend time with the teams adopting your paved paths, understand what aspects of their daily processes are affected and help them adjust. It could be as simple as sharing links such as <a href="https://martinfowler.com/articles/ship-show-ask.html" target="_blank" rel="noopener noreferrer">Ship / Show / Ask</a> to help them decide when to push straight to trunk. Spend time with engineering managers and agile practitioners in your organisation to help them understand these changes as well. Processes will need to be adapted and updated.</p><p>Characteristics of a healthy culture, ready for paved paths would be:</p><ul><li>A continuous improvement mindset</li><li>An organisation sponsoring long-term value, rather than short-term wins</li><li>Collaborative, proactive communication and knowledge sharing</li><li>Iterative and incremental development</li><li>Embracing DevOps practices, see <a href="https://continuousdelivery.com/implementing/culture/" target="_blank" rel="noopener noreferrer">Culture - Continuous Delivery</a></li></ul><p><strong>Communicate. Listen. Iterate - As a collective.</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="documentation-and-onboarding">Documentation and Onboarding<a href="#documentation-and-onboarding" class="hash-link" aria-label="Direct link to Documentation and Onboarding" title="Direct link to Documentation and Onboarding">​</a></h2><p>When thinking of how to catalogue and share paved paths, the first thing that will most likely jump to mind is <a href="https://backstage.io/" target="_blank" rel="noopener noreferrer">backstage.io</a> or similar Internal Developer Portal (IDP). We will immediately temper the enthusiasm. Getting an IDP setup and showcasing all your paved paths will take time, time that could be better spent creating more building blocks and blueprints. You will most likely end up with an IDP, but gradually work towards that goal - a shiny portal doesn't enable teams to be autonomous or get up and running quickly, but a good set of building blocks, blueprints and a well-written <code>README.md</code> will.</p><p>Split your documentation into two categories - one for the users of the paved paths (your engineers) and one for contributors to the paved paths. This will allow you to focus on enablement for engineers using the paved paths and separate, deep, technical "how this all works" style documentation. </p><p>Inside each of these categories, using the <a href="https://documentation.divio.com/" target="_blank" rel="noopener noreferrer">Divio Documentation System</a> is a great place to start. It provides simple principles to guide how your documents be structured into four functions: tutorials, how-to guides, reference and explanation. Keep the functions distinct from one another and split into the two audience categories. E.g. Under tutorials for your engineers, you would expect to find a tutorial on getting an API into production. Under tutorials for your contributors, you would expect to find a tutorial on adding a new terraform module to your infrastructure building blocks.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>The key thing to keep in mind at all times is the journey that the hikers are taking through your documentation. Put yourself in their shoes, blank out everything you already know, and stare at the woodland with fresh eyes. How well does your documentation hold up? Is it clear where to start? Is it intuitive to navigate? Can your great tooling actually be discovered? If an internal tool drops in the forest, but no one is around to hear it, does it make a sound?</p></div></div><p>Getting teams started using your paved paths is critical to their success and should be straight-forward. Teams using your documentation will test it - no documentation will survive first contact with them and this feedback is vital to help you improve. When onboarding teams, make feedback loops on the experience explicit - create mechanisms for them to ask questions, provide feedback and enable you to learn. Make getting help a first class citizen, add <code>--help</code>  to all your tools with links to your documentation, create a messaging channel for questions and answers. Questions your users have will highlight gaps in the developer experience as well as places that require more enablement help. Similarly, make giving feedback a first class citizen - don't be afraid to poll your users.</p><p>With whatever we produce, the vital thing is that we're treating our paved paths with the respect they deserve. Just as we have UX (user experience) for our client-facing products, we have DX (developer experience) for our paved paths. Fundamentally, all the same techniques should be used here as we would use for client-facing products. Research, agile methodologies, continuous feedback, continuous improvement. To succeed, we can use techniques we're already familiar with, the only difference is that our customer is an engineer!</p><p>Next, in part 5, we'll discuss where Platform Engineering comes into all of this, and whether you <em>need</em> it to build paved paths. - read it <a href="https://www.rickroche.com/2023/06/paved-paths-series-part-5-the-spectrum/" target="_blank" rel="noopener noreferrer">here</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2><ul><li><a href="https://12factor.net/" target="_blank" rel="noopener noreferrer">The Twelve-Factor App</a></li><li><a href="https://www.thoughtworks.com/radar/byor" target="_blank" rel="noopener noreferrer">Build your Own Radar | Thoughtworks</a></li><li><a href="https://medium.com/codex/what-is-a-paved-path-b2294463a3a9" target="_blank" rel="noopener noreferrer">What is a Paved Path?.by Matt Stine | CodeX | Medium</a></li><li><a href="https://www.hella-secure.com/post/create-your-paved-roads" target="_blank" rel="noopener noreferrer">Create your Paved Roads (hella-secure.com)</a></li><li><a href="https://www.infoq.com/articles/paving-road-production-coinbase/" target="_blank" rel="noopener noreferrer">Paving the Road to Production (infoq.com)</a></li><li><a href="https://cloud.redhat.com/blog/designing-golden-paths" target="_blank" rel="noopener noreferrer">Designing Golden Paths (redhat.com)</a></li><li><a href="https://engineering.atspotify.com/2020/08/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/" target="_blank" rel="noopener noreferrer">How We Use Golden Paths to Solve Fragmentation in Our Software Ecosystem - Spotify Engineering : Spotify Engineering (atspotify.com)</a></li></ul>]]></content>
        <author>
            <name>Chris Tacey-Green</name>
            <uri>https://github.com/ctaceygreen</uri>
        </author>
        <author>
            <name>Rick Roche</name>
            <uri>https://www.rickroche.com/</uri>
        </author>
        <category label="paved-path" term="paved-path"/>
        <category label="anatomy" term="anatomy"/>
        <category label="inner-workings" term="inner-workings"/>
        <category label="building-blocks" term="building-blocks"/>
        <category label="blueprints" term="blueprints"/>
        <category label="funnels" term="funnels"/>
        <category label="culture" term="culture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Paved Paths Series - Part 2 - A One Pager]]></title>
        <id>https://ctaceygreen.github.io/blog/paved-paths-series-part-2-a-one-pager</id>
        <link href="https://ctaceygreen.github.io/blog/paved-paths-series-part-2-a-one-pager"/>
        <updated>2023-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Part 2 of the series - Your one-pager to demonstrate the value of paved paths]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="title image reading &amp;quot;Paved Paths: A one pager&amp;quot; with a hiking photo" src="/assets/images/title-image-75adf7258f49f9811b6d19bdc8bd0359.png" width="976" height="391" class="img_ev3q"></p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Paved Path Series</div><div class="admonitionContent_S0QG"><p>This is Part 2 in a series of posts discussing Paved Paths between <a href="https://www.rickroche.com/" target="_blank" rel="noopener noreferrer">Rick</a> and I.</p><ul><li><a href="https://www.rickroche.com/2023/04/paved-paths-series-part-1-lets-talk-about-paved-paths" target="_blank" rel="noopener noreferrer">Part 1 - Paved Paths: Let's talk about paved paths</a></li><li><a href="https://www.rickroche.com/2023/05/paved-paths-series-part-3-why-paved-paths" target="_blank" rel="noopener noreferrer">Part 3 - Paved Paths: Why Paved Paths?</a></li><li><a href="https://christaceygreen.com/blog/paved-paths-series-part-4-the-anatomy-of-paved-paths" target="_blank" rel="noopener noreferrer">Part 4 - Paved Paths: The Anatomy of Paved Paths</a></li><li><a href="https://www.rickroche.com/2023/06/paved-paths-series-part-5-the-spectrum/" target="_blank" rel="noopener noreferrer">Part 5 - Paved Paths: The Spectrum of Platform Engineering and Paved Paths</a></li></ul></div></div><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>Why just one page?</div><div class="admonitionContent_S0QG"><p>We both found ourselves needing to write a one-page summary of paved paths. This would most likely act as a landing page for someone to 'get the gist' of what these are. Low detail. Imagine the CxO of your company wants to know what these are.</p></div></div><h1>What is a paved path?</h1><p>A paved path ensures that a well-trodden route is an easy, quick and safe way of reaching a clearly defined destination.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hiking">Hiking<a href="#hiking" class="hash-link" aria-label="Direct link to Hiking" title="Direct link to Hiking">​</a></h2><p>Imagine you're hiking through a woodland. Your destination is 'Chuck's Café', 4 miles away. You have a couple of options in this situation:</p><ol><li>Woodland map in hand, follow the predefined path to the café.</li><li>Knife in hand, head directly into the bush, confident you have the navigation and athletic abilities to reach the café.</li></ol><p><img loading="lazy" alt="image of a path through woodland with two possible routes" src="/assets/images/forest_path-4fb04f8e14427247f9d9dc5f0dc2bb97.png" width="606" height="416" class="img_ev3q"></p><p>Clearly, #2 is a much more adventurous decision to make. It may result in you learning new skills, or honing your existing ones. It could drive you to solve problems in new, innovative ways. However, it will most likely cause you to reach the café much later than if you'd followed the predefined path, dishevelled and missing your watch.</p><p>Option #1 is our paved path. It is predictable, safe, and fast. It will need walkers to make very few decisions(maybe a fork or two), will be smooth to traverse, and protects them from the risks of the deeper woodland (see: Bears). It is also unlikely to yield any opportunities for innovation.</p><p>This is the equivalent of our Engineers aiming for their destination of a 'REST API'. Nothing is stopping them from taking the untrodden path, where they will define patterns from scratch, and solve all of the problems along the way. It takes time though. It's also risky; there may well be challenges the team hadn't even considered when they started the journey, like securing their API against internal attackers. A paved path takes care of all of this for them, and much like a cookie-cutter, allows them to produce, in this example, APIs of consistent quality in a predictable amount of time.</p><h1>Does this turn us into a stale assembly line?</h1><p>No. But it could, if used incorrectly.</p><p>To succeed, we need exploitation <strong>and</strong> exploration. </p><p>If all of our teams only ever follow a fixed paved path, innovation dies. The path never evolves. The destination never changes. The technical value of the company will slowly diminish, until we wake up and realise none of our customer base owns a fax machine anymore.</p><p>At the other extreme, if every team is adventuring into the woodland when 80% of them are trying to reach the same destination, we're not exploiting enough. We're solving the same problems in different ways, over and over again, instead of focusing on innovating elsewhere.</p><p>So... we need both. We need paved paths, which serves the 80% across common use cases. We deliver consistently and with quality. The 20% are in the woodland, exploring new paths, new patterns, new technologies. These new paths may become forks on the paved path, as destinations evolve. If we ensure a balance between exploitation and exploration, paved paths massively empower our engineers and the organisation as a whole, without ever becoming stale.</p><p>In part 3 we go into more detail on why organisations need paved paths - read it <a href="https://www.rickroche.com/2023/05/paved-paths-series-part-3-why-paved-paths" target="_blank" rel="noopener noreferrer">here</a> !</p><p>Featured image background by <a href="https://unsplash.com/@austinban?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener noreferrer">Austin Ban</a> on <a href="https://unsplash.com/photos/juHayWuaaoQ?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener noreferrer">Unsplash</a>
Map image generated by <a href="https://www.craiyon.com/" target="_blank" rel="noopener noreferrer">Craiyon</a>, updated using <a href="https://github.com/excalidraw/excalidraw" target="_blank" rel="noopener noreferrer">excalidraw</a></p>]]></content>
        <author>
            <name>Chris Tacey-Green</name>
            <uri>https://github.com/ctaceygreen</uri>
        </author>
        <author>
            <name>Rick Roche</name>
            <uri>https://www.rickroche.com/</uri>
        </author>
        <category label="paved-path" term="paved-path"/>
        <category label="one-pager" term="one-pager"/>
        <category label="summary" term="summary"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Returning]]></title>
        <id>https://ctaceygreen.github.io/blog/returning</id>
        <link href="https://ctaceygreen.github.io/blog/returning"/>
        <updated>2023-04-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[So I disappeared from blogging for...a year and a half.]]></summary>
        <content type="html"><![CDATA[<p>So I disappeared from blogging for...a year and a half.</p><p>I apologise. I was focusing my energy on a very important deployment - my daughter! And if I'm honest, on balance, my daughter probably wins out in importance versus this blog.</p><p>But my daughter is now an incredibly cute, happy and genuinely funny 1 year old. I reckon we're at a point where I can find spare minutes in my day to get back into blogging. This isn't just a random thought though, I have plans! I'm currently working on a series of posts, alongside an epic human, on a topic I find extremely interesting. We also happen to believe it's vitally important given the direction the industry is heading.</p><p>So not only will I be back, but I'll be back with some regular posts! It's an Easter miracle.</p><p>OK, that's all. See you very soon...</p>]]></content>
        <author>
            <name>Chris Tacey-Green</name>
            <uri>https://github.com/ctaceygreen</uri>
        </author>
        <category label="returning" term="returning"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How do I check the health of my Azure Consumption Functions when swapping Deployment Slots?]]></title>
        <id>https://ctaceygreen.github.io/blog/azure-consumption-functions-healthcheck-with-deployment-slots</id>
        <link href="https://ctaceygreen.github.io/blog/azure-consumption-functions-healthcheck-with-deployment-slots"/>
        <updated>2021-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Setting the scene]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-the-scene">Setting the scene<a href="#setting-the-scene" class="hash-link" aria-label="Direct link to Setting the scene" title="Direct link to Setting the scene">​</a></h2><p>Okay that title has quite a few elements to it, so let's break down exactly what we're trying to do here...</p><p>Our situation:</p><ul><li>An Azure Function running on a consumption plan</li><li><a href="https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots" target="_blank" rel="noopener noreferrer">Deployment slots</a> configured within our IaC (a guide on these could be a separate post)</li><li>An ADO pipeline that deploys our IaC, code and then swaps our staging and production slot</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-whats-the-problem-here">So what's the problem here?<a href="#so-whats-the-problem-here" class="hash-link" aria-label="Direct link to So what's the problem here?" title="Direct link to So what's the problem here?">​</a></h2><p>Our problem is that with the current setup, swapping slots on a consumption Function assumes healthiness based on loading the root URL of your Function App. This may be suitable for simple Functions, but as soon as your Function has downstream dependencies (such as a reliance on a DB, queue or other API), our requirements become more complicated. Ideally, our deployment process would look something like :</p><ul><li>Deploy infrastructure</li><li>Deploy code to staging slot</li><li>Check downstream dependencies are correctly configured and accessible to staging slot</li><li>Swap staging and production slot</li></ul><p>Hopefully you can see now that our root URL is letting us down slightly.</p><p>This is where we can turn to health-checks. In many services (App Service, Kubernetes etc), zero-downtime deployments utilise health probes, which hit a predefined HTTP endpoint to determine that your app is ready and healthy. An experienced blogger and all-round smart guy named John Reilly has already created a similar post <a href="https://blog.johnnyreilly.com/2021/02/11/azure-app-service-health-checks-and-zero-downtime-deployments" target="_blank" rel="noopener noreferrer">here</a> to explain how we can achieve this for Azure App Service. This process can be followed if you're running your Functions on an App Service plan. If only this worked for consumption Functions too, my post would be completely unnecessary!
Unfortunately, it doesn't. The <code>healthcheckPath</code> used in App Service to facilitate this functionality is not supported on the consumption plan. Annoying, but we still have a solution!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-solution">The solution<a href="#the-solution" class="hash-link" aria-label="Direct link to The solution" title="Direct link to The solution">​</a></h2><p>There are some sneaky appsettings that we can set on our Function. These configure which endpoint is used during slot warmup to check your slot is healthy. The appsettings are as follows:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token property">"appsettings"</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"WEBSITE_WARMUP_PATH"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"value"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"[parameters('healthcheckPath')]"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"WEBSITE_SWAP_WARMUP_PING_PATH"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"value"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"[parameters('healthcheckPath')]"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"WEBSITE_SWAP_WARMUP_PING_STATUSES"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"value"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"200"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>WEBSITE_WARMUP_PATH</code> - Used in a few different areas of Azure. The reason we need it is because we have authentication enabled across all endpoints of our Function. Unlike the healthcheckPath functionality of app-service, the Function slot warmup process does not run 'behind' the auth/ip restriction layer. Therefore, this appsetting specifies that the authentication layer should ignore this path and allow anonymous calls. This should be considered carefully with your use-case, ensuring that you're not opening yourself up to DOS attacks or returning sensitive information that can be used as a security hole.</li><li><code>WEBSITE_SWAP_WARMUP_PING_PATH</code> - The path to your healthcheck/ping endpoint on your Function. e.g. '/api/healthcheck'</li><li><code>WEBSITE_SWAP_WARMUP_PING_STATUSES</code> - The statuses that you will accept as a successful response from your healthcheck endpoint. Without this, Azure will consider some redirect status codes as successful responses, so in our example we're making this much more specific with just a '200' considered successful.</li></ul><p>After adding this into your ARM template for the Function <code>Microsoft.Web/Sites</code> and it's associated slot, you're good to go! The final step is to ensure that your ADO pipeline is running the task below to swap slots on your Function:</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> </span><span class="token key atrule">task</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> AzureAppServiceManager@0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token key atrule">displayName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Swap Staging Slot with Production'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token key atrule">inputs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Swap Slots'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">azureSubscription</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'$(azureSubscription)'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">resourceGroupName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $(resourceGroupName)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">webAppName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $(functionName)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">SourceSlot</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'stage'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Running this ADO pipeline step will now check your <code>WEBSITE_SWAP_WARMUP_PING_PATH</code> is returning the expected status before swapping your slot into production. This should greatly reduce the likelihood of a consumption Function being deployed to production with misconfigured dependencies (e.g. invalid connection-string). You could easily implement this pattern for any consumption Functions within your estate, even non-http-triggers, all you'd need to do is ensure that an associated healthcheck http-trigger Function was deployed alongside it.</p><p>That should do us for this one! If anything isn't clear, get in touch and I'd be happy to provide more reproducable examples of the entire ARM template and pipeline steps.</p><p>Until next time...</p>]]></content>
        <author>
            <name>Chris Tacey-Green</name>
            <uri>https://github.com/ctaceygreen</uri>
        </author>
        <category label="deployment-slots" term="deployment-slots"/>
        <category label="healthcheck" term="healthcheck"/>
        <category label="consumption" term="consumption"/>
        <category label="function" term="function"/>
        <category label="azure" term="azure"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://ctaceygreen.github.io/blog/welcome</id>
        <link href="https://ctaceygreen.github.io/blog/welcome"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I figured the first post couldn't be a heavy technical braindump. That would be rude.]]></summary>
        <content type="html"><![CDATA[<p>I figured the first post couldn't be a heavy technical braindump. That would be rude. </p><p>Instead, here's a much more bite-size and welcoming 'Welcome' post, to break the blog in.
Since I'm British, this is where I'd naturally talk about the weather to break the ice. So.. it's the middle of Summer in the UK, and therefore has been wet, windy and grey today.</p><p>Good.</p><p>With that out of the way, here's a quick summary of what topics to expect from the first bunch of posts:</p><ul><li>Approaching deployment in Azure Devops</li><li>Monitoring in Azure</li><li>Alerting in Azure</li><li>Logging in Azure (Functions and App Service)</li><li>Securing an application in Azure App Service</li><li>Azure integration technologies</li><li>Why services in Azure want to be event-driven</li><li>Building an event-driven solution in Azure</li><li>Things you'll need in your Azure Function code</li><li>Why templates are your friend</li><li>Integration in a Hybrid cloud model</li></ul><p>Very Azure-heavy, I realise. But those who have poked me to create this blog are hoping for some Azure guidance, so this is where I'll start my journey into blogging.</p><p>I better get writing my first post then...</p>]]></content>
        <author>
            <name>Chris Tacey-Green</name>
            <uri>https://github.com/ctaceygreen</uri>
        </author>
        <category label="welcome" term="welcome"/>
    </entry>
</feed>